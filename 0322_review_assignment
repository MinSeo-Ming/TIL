#include <stdio.h>
#include <math.h>

int mod (int val, int p);
void all_point_orders(int a,int b, int p);
void all_point_list(int a,int b, int p);
void one_point_orders(int a,int b,int x,int y, int p);

int main(){
    int a,b,p;
    int x,y;
    printf("타원 곡선 방정식 : y^2 = x^3 + ax + b (mod p)\n");
    printf("정수 'a' 'b' 와 'p' 를 띄어쓰기로 구분하여 입력하시오 ex) 1 1 10 : ");
    scanf("%d %d %d", &a, &b, &p);

    printf("1 : 타원곡선 상에 존재하는 모든 점들 : \n");
    all_point_list(a,b,p);

    printf("\n2 : 타원곡선 상의 모든 위수들 : \n");
    all_point_orders(a,b,p);
    printf("\n3 : 특정 좌표의 이산대수 구하기 : \n");
    printf("x좌표 y좌표를 차례로 띄어쓰기로 입력하시오 ex) 3 4 : ");
    scanf("%d %d" ,&x, &y);
    one_point_orders(a,b,x,y,p);

    return 0;
}

int mod (int val, int p){
    //mod연산 함수
    while (1)
    {
        if(val >=p) val = val%p;
        else if(val <0) val = val +p;
        if(val >=0 && val <p) break;
    }
    return val;
}

void all_point_list(int a,int b, int p){
    //타원 곡선 위의 모든 점
    int x,y;
    int temp_x3, temp_x, temp_y, temp, i,j;
    printf("0 (무한 원점)\t");

    for(int i=0; i< p; i++){
        x=i;
        //3차항, 1차항 연산
        temp_x3 =mod(x*x*x,p);
        temp_x = mod(a*x,p);

        temp = mod(temp_x3 + temp_x +b, p);
        for(j =0; j<p; j++){
            y=j; 
            temp_y = y*y;
            if(temp == temp_y||temp == mod(temp_y,p)){
                printf("(%3d, %3d)    \t",x,y);
            }
        }
    }
    printf("\n");
    return;
}

void all_point_orders(int a,int b, int p){
    //타원 곡선 위의 모든 점의 위수 구하기
    //all_point_list 와 거의 동일 
    int x,y;
    int temp_x3, temp_x, temp_y, temp, i,j;
    for(int i=0; i< p; i++){
        x=i;
        temp_x3 =mod(x*x*x,p);
        temp_x = mod(a*x,p);
        temp = temp_x3 + temp_x +b;
        temp = mod(temp, p);

        for(j =0; j<p; j++){
            y=j; 
            temp_y = y*y;
            if(temp == temp_y||temp == mod(temp_y,p)){
                printf("\n(%d, %d)의 order(s) : \n",x,y);
                //all_point_list와 유일한 차이점 각 점의 위수 구하는 함수 호출
                one_point_orders(a,b,x,y,p);
            }
        }
    }
    return;
}
void one_point_orders(int a,int b,int x1,int y1, int p){
    
    //위수를 구하는 함수
    int x2, y2, x3, y3, f_x, f_y, first,s_x, s_y, t_x, t_y, sub_x;
    int inver_x, inver_y; // 곱셈 값의 역원
    int order = 1, i; //order는 위수 계산

    for(i=0;;i++) {
        if(order == 1) {
            if(x1 == 0 && y1 == 0) {
                printf("  1 P = (0 , 0)\n");
                printf("무한 원점 \n order : 2\n");
                return ;
            }

            f_x = 3 * x1 * x1 + a;
            f_x = mod(f_x, p);

            for(int k=1; k<p; k++) {
                int result;
                result = 2 * y1 * k;
                if(mod(result, p) == 1) {
                    inver_y = k;
                    break;
                }
            }
            
            s_x = mod(f_x * inver_y, p);
            t_x=mod(s_x * s_x, p);

            first = mod(2 * x1, p);
            x3 = mod(t_x - first, p);

            //y3
            f_y = mod(x1 - x3, p);
            s_y = mod(s_x * f_y, p);

            y3 = mod(-y1 + s_y, p);

            x2 = x3;
            y2 = y3;

            printf("  1 P = (%3d , %3d)\n", x1, y1);
            printf("  2 P = (%3d , %3d)\n", x2, y2);

            if(y1 == 0) {
                printf("0 (무한 원점) \norder : 2\n");
                return ;
            }

            order = order + 1;
        }
        else {
            //무한 원점 판별
            if(x1 == x2 && ((y1 + y2) % p == 0)) {
                printf("%3d P = 0 (무한 원점) \norder : %3d\n", order + 1, order + 1);
                return ;
            }

            f_y = mod(y2 - y1, p);
            f_x = mod(x2 - x1, p);

            for(int k = 1; k<p; k++) {
                int result;
                result = f_x * k;
                if(mod(result, p) == 1) {
                    inver_x = k;
                    break;
                }
            }

            s_x = mod(f_y * inver_x, p);
            t_x = mod(s_x * s_x, p);

            x3 = mod(t_x - x1 - x2, p);

            //y3
            sub_x = mod(x1 - x3, p);
            s_y = mod(s_x * sub_x, p);

            y3 = mod(-y1 + s_y, p);

            x2 = x3;
            y2 = y3;

            printf("%3d P = (%3d , %3d)\n", order + 1, x3, y3);
            order = order + 1;
        }
    }
}

--타원곡선 관련된 정리가 필요한거 같다...
